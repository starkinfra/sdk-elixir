defmodule StarkInfra.IndividualIdentity.Log do
  alias __MODULE__, as: Log
  alias StarkInfra.Utils.Rest
  alias StarkInfra.Utils.API
  alias StarkInfra.Utils.Check
  alias StarkInfra.IndividualIdentity
  alias StarkInfra.User.Project
  alias StarkInfra.User.Organization
  alias StarkInfra.Error

  @moduledoc """
  Groups IndividualIdentity.Log related functions
  """
  @doc """
  Every time an IndividualIdentity entity is updated, a corresponding IndividualIdentity.Log
  is generated for the entity. This log is never generated by the user, but
  it can be retrieved to check additional information on the IndividualIdentity.

  ## Attributes (return-only):
    - `:id` [binary]: unique id returned when the log is created. ex: "5656565656565656"
    - `:identity` [IndividualIdentity]: IndividualIdentity entity to which the log refers to.
    - `:errors` [list of binaries]: list of errors linked to this IndividualIdentity event
    - `:type` [binary]: type of the IndividualIdentity event which triggered the log creation. ex: "created", "canceled", "processing", "failed", "success"
    - `:created` [DateTime, default nil]: creation DateTime for the Log. ex: ~U[2020-3-10 10:30:0:0]
  """
  @enforce_keys [
    :id,
    :identity,
    :errors,
    :type,
    :created
  ]
  defstruct [
    :id,
    :identity,
    :errors,
    :type,
    :created
  ]

  @type t() :: %__MODULE__{}

  @doc """
  Receive a single IndividualIdentity.Log object previously created by the Stark Infra API by its id

  ## Parameters (required):
    - `:id` [binary]: object unique id. ex: "5656565656565656"

  ## Parameters (optional):
    - `:user` [Organization/Project, default nil]: Organization or Project object returned from StarkInfra.project(). Only necessary if default project or organization has not been set in configs.

  ## Return:
    - IndividualIdentity.Log object that corresponds to the given id.
  """
  @spec get(
    binary,
    user: Project.t() |
    Organization.t() | nil
  ) ::
    {:ok, [Log.t()]} |
    {:error, [Error.t()]}
  def get(id, options \\ []) do
    Rest.get_id(resource(), id, options)
  end

  @doc """
  Same as get(), but it will unwrap the error tuple and raise in case of errors.
  """
  @spec get!(
    binary,
    user: Project.t() | Organization.t() | nil
  ) :: Log.t()
  def get!(id, options \\ []) do
    Rest.get_id!(resource(), id, options)
  end

  @doc """
  Receive a stream of IndividualIdentity.Log objects previously created in the Stark Infra API

  ## Parameters (optional):
    - `:limit` [integer, default nil]: maximum number of objects to be retrieved. Unlimited if nil. ex: 35
    - `:after` [Date or binary, default nil]: date filter for objects created only after specified date. ex: ~D[2020, 3, 10]
    - `:before` [Date or binary, default nil]: date filter for objects created only before specified date. ex: ~D[2020, 3, 10]
    - `:types` [list of binaries, default nil]: filter for log event types. ex: ["created", "canceled", "processing", "failed", "success"]
    - `:identity_ids` [list of binaries, default nil]: list of IndividualIdentity ids to filter logs. ex: ["5656565656565656", "4545454545454545"]
    - `:user` [Organization/Project, default nil]: Organization or Project object returned from StarkInfra.project(). Only necessary if default project or organization has not been set in configs.

  ## Return:
    - stream of IndividualIdentity.Log objects with updated attributes
  """
  @spec query(
    limit: integer,
    after: Date.t() | binary,
    before: Date.t() | binary,
    types: [binary],
    identity_ids: [binary],
    user: Project.t() | Organization.t()
  ) ::
    ({:cont, {:ok, [Log.t()]}} |
    {:error, [Error.t()]},
    any -> any)
  def query(options \\ []) do
    Rest.get_list(resource(), options)
  end

  @doc """
  Same as query(), but it will unwrap the error tuple and raise in case of errors.
  """
  @spec query!(
    limit: integer,
    after: Date.t() | binary,
    before: Date.t() | binary,
    types: [binary],
    identity_ids: [binary],
    user: Project.t() | Organization.t()
  ) :: [Log.t()]
  def query!(options \\ []) do
    Rest.get_list!(resource(), options)
  end

  @doc """
  Receive a list of up to 100 IndividualIdentity.Log objects previously created in the Stark Infra API and the cursor to the next page.
  Use this function instead of query if you want to manually page your requests.

  ## Parameters (optional):
    - `:cursor` [binary, default nil]: cursor returned on the previous page function call
    - `:limit` [integer, default 100]: maximum number of objects to be retrieved. It must be an integer between 1 and 100. ex: 50
    - `:after` [Date or binary, default nil]: date filter for objects created only after specified date. ex: ~D[2020, 3, 10]
    - `:before` [Date or binary, default nil]: date filter for objects created only before specified date. ex: ~D[2020, 3, 10]
    - `:types` [list of binaries, default nil]: filter for log event types. ex: ["created", "canceled", "processing", "failed", "success"]
    - `:identity_ids` [list of binaries, default nil]: list of IndividualIdentity ids to filter logs. ex: ["5656565656565656", "4545454545454545"]
    - `:user` [Organization/Project, default nil]: Organization or Project object returned from StarkInfra.project(). Only necessary if default project or organization has not been set in configs.

  ## Return:
    - list of IndividualIdentity.Log objects with updated attributes
    - cursor to retrieve the next page of IndividualIdentity.Log objects
  """
  @spec page(
    cursor: binary,
    limit: integer,
    after: Date.t() | binary,
    before: Date.t() | binary,
    types: [binary],
    identity_ids: [binary],
    user: Project.t() | Organization.t()
  ) ::
    {:ok, {binary, [Invoice.t()]}} |
    {:error, [Error.t()]}
  def page(options \\ []) do
    Rest.get_page(resource(), options)
  end

  @doc """
  Same as page(), but it will unwrap the error tuple and raise in case of errors.
  """
  @spec page!(
    cursor: binary,
    limit: integer,
    after: Date.t() | binary,
    before: Date.t() | binary,
    identity_ids: [binary],
    user: Project.t() | Organization.t()
  ) ::
    [Log.t()]
  def page!(options \\ []) do
    Rest.get_page!(resource(), options)
  end

  @doc false
  def resource() do
    {
      "IndividualIdentityLog",
      &resource_maker/1
    }
  end

  @doc false
  def resource_maker(json) do
    %Log{
      id: json[:id],
      identity: json[:identity] |> API.from_api_json(&IndividualIdentity.resource_maker/1),
      created: json[:created] |> Check.datetime(),
      type: json[:type],
      errors: json[:errors]
    }
  end
end
